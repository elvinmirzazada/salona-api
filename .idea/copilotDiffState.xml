<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/services/crud/base.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/services/crud/base.py" />
              <option name="updatedContent" value="from typing import Generic, TypeVar, Type, Any, Optional, List, Union, Dict&#10;from pydantic import BaseModel&#10;from sqlalchemy.orm import Session&#10;from app.db.base_class import BaseModel as DBBaseModel&#10;&#10;ModelType = TypeVar(&quot;ModelType&quot;, bound=DBBaseModel)&#10;CreateSchemaType = TypeVar(&quot;CreateSchemaType&quot;, bound=BaseModel)&#10;UpdateSchemaType = TypeVar(&quot;UpdateSchemaType&quot;, bound=BaseModel)&#10;&#10;class CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):&#10;    def __init__(self, model: Type[ModelType]):&#10;        &quot;&quot;&quot;&#10;        CRUD object with default methods to Create, Read, Update, Delete (CRUD).&#10;        **Parameters**&#10;        * `model`: A SQLAlchemy model class&#10;        * `schema`: A Pydantic model (schema) class&#10;        &quot;&quot;&quot;&#10;        self.model = model&#10;&#10;    def get(self, db: Session, id: Any) -&gt; Optional[ModelType]:&#10;        return db.query(self.model).filter(self.model.id == id).first()&#10;&#10;    def get_multi(&#10;        self, db: Session, *, skip: int = 0, limit: int = 100&#10;    ) -&gt; List[ModelType]:&#10;        return db.query(self.model).offset(skip).limit(limit).all()&#10;&#10;    def create(self, db: Session, *, obj_in: CreateSchemaType) -&gt; ModelType:&#10;        obj_in_data = obj_in.model_dump()&#10;        db_obj = self.model(**obj_in_data)&#10;        db.add(db_obj)&#10;        db.commit()&#10;        db.refresh(db_obj)&#10;        return db_obj&#10;&#10;    def update(&#10;        self,&#10;        db: Session,&#10;        *,&#10;        db_obj: ModelType,&#10;        obj_in: Union[UpdateSchemaType, Dict[str, Any]]&#10;    ) -&gt; ModelType:&#10;        obj_data = db_obj.__dict__&#10;        if isinstance(obj_in, dict):&#10;            update_data = obj_in&#10;        else:&#10;            update_data = obj_in.model_dump(exclude_unset=True)&#10;        for field in obj_data:&#10;            if field in update_data:&#10;                setattr(db_obj, field, update_data[field])&#10;        db.add(db_obj)&#10;        db.commit()&#10;        db.refresh(db_obj)&#10;        return db_obj&#10;&#10;    def remove(self, db: Session, *, id: Any) -&gt; ModelType:&#10;        obj = db.query(self.model).get(id)&#10;        db.delete(obj)&#10;        db.commit()&#10;        return obj" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/services/crud/booking.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/services/crud/booking.py" />
              <option name="originalContent" value="from datetime import timedelta&#10;from typing import List, Optional, Any&#10;from datetime import date&#10;&#10;from pydantic.v1 import UUID4&#10;from sqlalchemy.orm import Session&#10;&#10;from app.models import BookingServices&#10;from app.models.models import Bookings&#10;from app.schemas import BookingServiceRequest&#10;from app.schemas.schemas import BookingCreate&#10;from app.services.crud import service&#10;&#10;&#10;def get(db: Session, id: UUID4) -&gt; Optional[Bookings]:&#10;    return db.query(Bookings).filter(Bookings.id == id).first()&#10;&#10;&#10;def get_all(db: Session, skip: int = 0, limit: int = 100) -&gt; list[type[Bookings]]:&#10;    return list(db.query(Bookings).offset(skip).limit(limit).all())&#10;&#10;def get_user_bookings_in_range(db: Session, user_id: str, start_date: Any, end_date: Any) -&gt; list[&quot;Bookings&quot;]:&#10;    return list(db.query(Bookings).join(BookingServices).filter(&#10;        BookingServices.user_id == user_id,&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all())&#10;&#10;def get_all_bookings_in_range(db: Session, start_date: date, end_date: date):&#10;    # Join Bookings and BookingServices, return tuples of (booking, user_id)&#10;    return db.query(Bookings, BookingServices.user_id).join(BookingServices, Bookings.id == BookingServices.booking_id).filter(&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all()&#10;#&#10;#     def get_multi_by_business(self, db: Session, business_id: int, skip: int = 0, limit: int = 100) -&gt; List[Appointment]:&#10;#         return db.query(Appointment).filter(Appointment.business_id == business_id).offset(skip).limit(limit).all()&#10;#&#10;#     def get_multi_by_client(self, db: Session, client_id: int, skip: int = 0, limit: int = 100) -&gt; List[Appointment]:&#10;#         return db.query(Appointment).filter(Appointment.client_id == client_id).offset(skip).limit(limit).all()&#10;#&#10;&#10;&#10;def calc_service_params(db, services: List[BookingServiceRequest]):&#10;    total_duration = 0&#10;    total_price = 0&#10;&#10;    for srv in services:&#10;        selected_srv = service.get_company_service(db, srv.company_service_id)&#10;        total_duration += selected_srv.custom_duration&#10;        total_price += int(selected_srv.custom_price)&#10;&#10;    return total_duration, total_price&#10;&#10;&#10;&#10;def create(self, db: Session, *, obj_in: BookingCreate, customer_id: UUID4) -&gt; Bookings:&#10;    total_duration, total_price = self.calc_service_params(db, obj_in.services)&#10;    db_obj = Bookings(&#10;        customer_id=customer_id,&#10;        company_id=obj_in.company_id,&#10;        start_at=obj_in.start_time,&#10;        end_at= obj_in.start_time + timedelta(minutes=total_duration),&#10;        total_price=total_price,&#10;        notes=obj_in.notes&#10;    )&#10;    db.add(db_obj)&#10;    db.commit()&#10;&#10;    start_time = obj_in.start_time&#10;    for srv in obj_in.services:&#10;        duration, _ = self.calc_service_params(db, obj_in.services)&#10;        db_service_obj = BookingServices(&#10;            booking_id=db_obj.id,&#10;            company_service_id=srv.company_service_id,&#10;            user_id=srv.user_id,&#10;            notes=srv.notes,&#10;            start_at=start_time,&#10;            end_at=start_time + timedelta(minutes=duration)&#10;        )&#10;        start_time = db_service_obj.end_at&#10;        db.add(db_service_obj)&#10;&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;    return db_obj" />
              <option name="updatedContent" value="from datetime import timedelta&#10;from typing import List, Optional, Any&#10;from datetime import date&#10;&#10;from pydantic.v1 import UUID4&#10;from sqlalchemy.orm import Session&#10;&#10;from app.models import BookingServices&#10;from app.models.models import Bookings&#10;from app.schemas import BookingServiceRequest&#10;from app.schemas.schemas import BookingCreate&#10;from app.services.crud import service&#10;&#10;&#10;def get(db: Session, id: UUID4) -&gt; Optional[Bookings]:&#10;    return db.query(Bookings).filter(Bookings.id == id).first()&#10;&#10;&#10;def get_all(db: Session, skip: int = 0, limit: int = 100) -&gt; list[type[Bookings]]:&#10;    return list(db.query(Bookings).offset(skip).limit(limit).all())&#10;&#10;def get_user_bookings_in_range(db: Session, user_id: str, start_date: Any, end_date: Any) -&gt; list[&quot;Bookings&quot;]:&#10;    return list(db.query(Bookings).join(BookingServices).filter(&#10;        BookingServices.user_id == user_id,&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all())&#10;&#10;def get_all_bookings_in_range(db: Session, start_date: date, end_date: date):&#10;    # Join Bookings and BookingServices, return tuples of (booking, user_id)&#10;    return db.query(Bookings, BookingServices.user_id).join(BookingServices, Bookings.id == BookingServices.booking_id).filter(&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all()&#10;#&#10;#     def get_multi_by_business(self, db: Session, business_id: int, skip: int = 0, limit: int = 100) -&gt; List[Appointment]:&#10;#         return db.query(Appointment).filter(Appointment.business_id == business_id).offset(skip).limit(limit).all()&#10;#&#10;#     def get_multi_by_client(self, db: Session, client_id: int, skip: int = 0, limit: int = 100) -&gt; List[Appointment]:&#10;#         return db.query(Appointment).filter(Appointment.client_id == client_id).offset(skip).limit(limit).all()&#10;#&#10;&#10;&#10;def calc_service_params(db, services: List[BookingServiceRequest]):&#10;    total_duration = 0&#10;    total_price = 0&#10;&#10;    for srv in services:&#10;        selected_srv = service.get_company_service(db, srv.company_service_id)&#10;        total_duration += selected_srv.custom_duration&#10;        total_price += int(selected_srv.custom_price)&#10;&#10;    return total_duration, total_price&#10;&#10;&#10;&#10;def create(self, db: Session, *, obj_in: BookingCreate, customer_id: UUID4) -&gt; Bookings:&#10;    total_duration, total_price = self.calc_service_params(db, obj_in.services)&#10;    db_obj = Bookings(&#10;        customer_id=customer_id,&#10;        company_id=obj_in.company_id,&#10;        start_at=obj_in.start_time,&#10;        end_at= obj_in.start_time + timedelta(minutes=total_duration),&#10;        total_price=total_price,&#10;        notes=obj_in.notes&#10;    )&#10;    db.add(db_obj)&#10;    db.commit()&#10;&#10;    start_time = obj_in.start_time&#10;    for srv in obj_in.services:&#10;        duration, _ = self.calc_service_params(db, obj_in.services)&#10;        db_service_obj = BookingServices(&#10;            booking_id=db_obj.id,&#10;            company_service_id=srv.company_service_id,&#10;            user_id=srv.user_id,&#10;            notes=srv.notes,&#10;            start_at=start_time,&#10;            end_at=start_time + timedelta(minutes=duration)&#10;        )&#10;        start_time = db_service_obj.end_at&#10;        db.add(db_service_obj)&#10;&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;    return db_obj" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/services/crud/company.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/services/crud/company.py" />
              <option name="originalContent" value="import uuid&#10;from typing import Optional, List&#10;&#10;from pydantic.v1 import UUID4&#10;from sqlalchemy.orm import Session&#10;&#10;from app.models import CompanyRoleType, StatusType, UserAvailabilities&#10;from app.models.models import CompanyUsers, Companies&#10;from app.schemas.schemas import (&#10;    CompanyCreate,&#10;    User&#10;)&#10;&#10;&#10;def get(db: Session, id: UUID4) -&gt; Optional[Companies]:&#10;    return db.query(Companies).filter(Companies.id == id).first()&#10;&#10;def get_company_users(db: Session, company_id: str) -&gt; List:&#10;    return list(db.query(CompanyUsers).filter(CompanyUsers.company_id == company_id).all())&#10;&#10;def get_company_all_users_availabilities(db: Session, company_id: str) -&gt; List:&#10;    &quot;&quot;&quot;Get all availabilities for users belonging to the given company.&quot;&quot;&quot;&#10;    # Get all user_ids for the company&#10;    user_ids = db.query(CompanyUsers.user_id).filter(CompanyUsers.company_id == company_id).subquery()&#10;    # Get all availabilities for those users&#10;    return db.query(UserAvailabilities).filter(UserAvailabilities.user_id.in_(user_ids), UserAvailabilities.is_available == True).all()&#10;&#10;&#10;def create(db: Session, *, obj_in: CompanyCreate, current_user: User) -&gt; Companies:&#10;&#10;    db_obj = Companies(**obj_in.model_dump())&#10;    # db_obj.id = str(uuid.uuid4())&#10;    db.add(db_obj)&#10;&#10;    cmp_usr_obj = CompanyUsers(user_id=current_user.id,&#10;                               company_id=db_obj.id,&#10;                               role=CompanyRoleType.admin,&#10;                               status=StatusType.active)&#10;    db.add(cmp_usr_obj)&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;&#10;    return db_obj&#10;&#10;#&#10;#     def update(self, db: Session, *, db_obj: Business, obj_in: BusinessUpdate) -&gt; Business:&#10;#         update_data = obj_in.model_dump(exclude_unset=True)&#10;#         for field, value in update_data.items():&#10;#             setattr(db_obj, field, value)&#10;#         db.add(db_obj)&#10;#         db.commit()&#10;#         db.refresh(db_obj)&#10;#         return db_obj&#10;#&#10;#" />
              <option name="updatedContent" value="import uuid&#10;from typing import Optional, List&#10;&#10;from pydantic.v1 import UUID4&#10;from sqlalchemy.orm import Session&#10;&#10;from app.models import CompanyRoleType, StatusType, UserAvailabilities&#10;from app.models.models import CompanyUsers, Companies&#10;from app.schemas.schemas import (&#10;    CompanyCreate,&#10;    User&#10;)&#10;&#10;&#10;def get(db: Session, id: UUID4) -&gt; Optional[Companies]:&#10;    return db.query(Companies).filter(Companies.id == id).first()&#10;&#10;def get_company_users(db: Session, company_id: str) -&gt; List:&#10;    return list(db.query(CompanyUsers).filter(CompanyUsers.company_id == company_id).all())&#10;&#10;def get_company_all_users_availabilities(db: Session, company_id: str) -&gt; List:&#10;    &quot;&quot;&quot;Get all availabilities for users belonging to the given company.&quot;&quot;&quot;&#10;    # Get all user_ids for the company&#10;    user_ids = db.query(CompanyUsers.user_id).filter(CompanyUsers.company_id == company_id).subquery()&#10;    # Get all availabilities for those users&#10;    return db.query(UserAvailabilities).filter(UserAvailabilities.user_id.in_(user_ids), UserAvailabilities.is_available == True).all()&#10;&#10;&#10;def create(db: Session, *, obj_in: CompanyCreate, current_user: User) -&gt; Companies:&#10;&#10;    db_obj = Companies(**obj_in.model_dump())&#10;    # db_obj.id = str(uuid.uuid4())&#10;    db.add(db_obj)&#10;&#10;    cmp_usr_obj = CompanyUsers(user_id=current_user.id,&#10;                               company_id=db_obj.id,&#10;                               role=CompanyRoleType.admin,&#10;                               status=StatusType.active)&#10;    db.add(cmp_usr_obj)&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;&#10;    return db_obj&#10;&#10;#&#10;#     def update(self, db: Session, *, db_obj: Business, obj_in: BusinessUpdate) -&gt; Business:&#10;#         update_data = obj_in.model_dump(exclude_unset=True)&#10;#         for field, value in update_data.items():&#10;#             setattr(db_obj, field, value)&#10;#         db.add(db_obj)&#10;#         db.commit()&#10;#         db.refresh(db_obj)&#10;#         return db_obj&#10;#&#10;#" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>