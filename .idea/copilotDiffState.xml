<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/alembic/versions/add_membership_tables.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/alembic/versions/add_membership_tables.py" />
              <option name="originalContent" value="&quot;&quot;&quot;add membership functionality&#10;&#10;Revision ID: add_membership_tables&#10;Revises: 837a5dae2814&#10;Create Date: 2025-10-30 12:00:00.000000&#10;&#10;&quot;&quot;&quot;&#10;from alembic import op&#10;import sqlalchemy as sa&#10;from sqlalchemy.dialects import postgresql&#10;import uuid&#10;&#10;# revision identifiers, used by Alembic.&#10;revision = 'add_membership_tables'&#10;down_revision = '837a5dae2814'&#10;branch_labels = None&#10;depends_on = None&#10;&#10;&#10;def upgrade() -&gt; None:&#10;    # Create enum type for membership plan&#10;    membership_plan_type = postgresql.ENUM('standard', 'premium', 'vip', name='membershipplantype', create_type=True)&#10;    membership_plan_type.create(op.get_bind(), checkfirst=True)&#10;    &#10;    # Create membership_plans table&#10;    op.create_table(&#10;        'membership_plans',&#10;        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),&#10;        sa.Column('name', sa.String(100), nullable=False, unique=True),&#10;        sa.Column('plan_type', membership_plan_type, nullable=False, unique=True),&#10;        sa.Column('description', sa.Text, nullable=True),&#10;        sa.Column('price', sa.Integer, nullable=False),&#10;        sa.Column('duration_days', sa.Integer, nullable=False, server_default='30'),&#10;        sa.Column('status', postgresql.ENUM('active', 'inactive', 'suspended', name='statustype'), server_default='active'),&#10;        sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),&#10;        sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now())&#10;    )&#10;&#10;    # Create company_memberships table&#10;    op.create_table(&#10;        'company_memberships',&#10;        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),&#10;        sa.Column('company_id', postgresql.UUID(as_uuid=True), nullable=False),&#10;        sa.Column('membership_plan_id', postgresql.UUID(as_uuid=True), nullable=False),&#10;        sa.Column('status', postgresql.ENUM('active', 'inactive', 'suspended', name='statustype'), server_default='active'),&#10;        sa.Column('start_date', sa.DateTime, nullable=False, server_default=sa.func.now()),&#10;        sa.Column('end_date', sa.DateTime, nullable=False),&#10;        sa.Column('auto_renew', sa.Boolean, server_default='true'),&#10;        sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),&#10;        sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now()),&#10;        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),&#10;        sa.ForeignKeyConstraint(['membership_plan_id'], ['membership_plans.id'], ondelete='CASCADE'),&#10;    )&#10;    &#10;    # Create index for company_memberships&#10;    op.create_index('idx_company_memberships_company_id', 'company_memberships', ['company_id'])&#10;    op.create_index('idx_company_memberships_status', 'company_memberships', ['status'])&#10;    &#10;    # Insert default membership plans&#10;    op.execute(&quot;&quot;&quot;&#10;        INSERT INTO membership_plans (id, name, plan_type, description, price, duration_days, max_bookings_per_month, discount_percentage, priority_booking, cancellation_hours, features, status)&#10;        VALUES &#10;        (gen_random_uuid(), 'Standard Membership', 'standard', 'Basic membership with limited features', 999, 30, 5, 5, false, 24, '{&quot;support&quot;: &quot;email&quot;, &quot;booking_window&quot;: 7}', 'active'),&#10;        (gen_random_uuid(), 'Premium Membership', 'premium', 'Enhanced membership with more features and better benefits', 1999, 30, 15, 10, true, 48, '{&quot;support&quot;: &quot;priority_email&quot;, &quot;booking_window&quot;: 14, &quot;exclusive_services&quot;: true}', 'active'),&#10;        (gen_random_uuid(), 'VIP Membership', 'vip', 'Unlimited bookings with premium benefits', 4999, 30, NULL, 20, true, 72, '{&quot;support&quot;: &quot;24/7_phone&quot;, &quot;booking_window&quot;: 30, &quot;exclusive_services&quot;: true, &quot;concierge&quot;: true}', 'active')&#10;    &quot;&quot;&quot;)&#10;&#10;&#10;def downgrade() -&gt; None:&#10;    # Drop tables&#10;    op.drop_index('idx_company_memberships_status', 'company_memberships')&#10;    op.drop_index('idx_company_memberships_company_id', 'company_memberships')&#10;    op.drop_table('company_memberships')&#10;    &#10;    op.drop_table('membership_plans')&#10;    &#10;    # Drop enum type&#10;    membership_plan_type = postgresql.ENUM('standard', 'premium', 'vip', name='membershipplantype')&#10;    membership_plan_type.drop(op.get_bind(), checkfirst=True)&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;add membership functionality&#10;&#10;Revision ID: add_membership_tables&#10;Revises: 837a5dae2814&#10;Create Date: 2025-10-30 12:00:00.000000&#10;&#10;&quot;&quot;&quot;&#10;from alembic import op&#10;import sqlalchemy as sa&#10;from sqlalchemy.dialects import postgresql&#10;import uuid&#10;&#10;# revision identifiers, used by Alembic.&#10;revision = 'add_membership_tables'&#10;down_revision = '837a5dae2814'&#10;branch_labels = None&#10;depends_on = None&#10;&#10;&#10;def upgrade() -&gt; None:&#10;    # Create enum type for membership plan&#10;    membership_plan_type = postgresql.ENUM('standard', 'premium', 'vip', name='membershipplantype', create_type=True)&#10;    membership_plan_type.create(op.get_bind(), checkfirst=True)&#10;    &#10;    # Create membership_plans table&#10;    op.create_table(&#10;        'membership_plans',&#10;        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),&#10;        sa.Column('name', sa.String(100), nullable=False, unique=True),&#10;        sa.Column('plan_type', membership_plan_type, nullable=False, unique=True),&#10;        sa.Column('description', sa.Text, nullable=True),&#10;        sa.Column('price', sa.Integer, nullable=False),&#10;        sa.Column('duration_days', sa.Integer, nullable=False, server_default='30'),&#10;        sa.Column('status', postgresql.ENUM('active', 'inactive', 'suspended', name='statustype'), server_default='active'),&#10;        sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),&#10;        sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now())&#10;    )&#10;&#10;    # Create company_memberships table&#10;    op.create_table(&#10;        'company_memberships',&#10;        sa.Column('id', postgresql.UUID(as_uuid=True), primary_key=True, default=uuid.uuid4),&#10;        sa.Column('company_id', postgresql.UUID(as_uuid=True), nullable=False),&#10;        sa.Column('membership_plan_id', postgresql.UUID(as_uuid=True), nullable=False),&#10;        sa.Column('status', postgresql.ENUM('active', 'inactive', 'suspended', name='statustype'), server_default='active'),&#10;        sa.Column('start_date', sa.DateTime, nullable=False, server_default=sa.func.now()),&#10;        sa.Column('end_date', sa.DateTime, nullable=False),&#10;        sa.Column('auto_renew', sa.Boolean, server_default='true'),&#10;        sa.Column('created_at', sa.DateTime, server_default=sa.func.now()),&#10;        sa.Column('updated_at', sa.DateTime, server_default=sa.func.now(), onupdate=sa.func.now()),&#10;        sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ondelete='CASCADE'),&#10;        sa.ForeignKeyConstraint(['membership_plan_id'], ['membership_plans.id'], ondelete='CASCADE'),&#10;    )&#10;    &#10;    # Create index for company_memberships&#10;    op.create_index('idx_company_memberships_company_id', 'company_memberships', ['company_id'])&#10;    op.create_index('idx_company_memberships_status', 'company_memberships', ['status'])&#10;    &#10;    # Insert default membership plans&#10;    op.execute(&quot;&quot;&quot;&#10;        INSERT INTO membership_plans (id, name, plan_type, description, price, duration_days, max_bookings_per_month, discount_percentage, priority_booking, cancellation_hours, features, status)&#10;        VALUES &#10;        (gen_random_uuid(), 'Standard Membership', 'standard', 'Basic membership with limited features', 999, 30, 5, 5, false, 24, '{&quot;support&quot;: &quot;email&quot;, &quot;booking_window&quot;: 7}', 'active'),&#10;        (gen_random_uuid(), 'Premium Membership', 'premium', 'Enhanced membership with more features and better benefits', 1999, 30, 15, 10, true, 48, '{&quot;support&quot;: &quot;priority_email&quot;, &quot;booking_window&quot;: 14, &quot;exclusive_services&quot;: true}', 'active'),&#10;        (gen_random_uuid(), 'VIP Membership', 'vip', 'Unlimited bookings with premium benefits', 4999, 30, NULL, 20, true, 72, '{&quot;support&quot;: &quot;24/7_phone&quot;, &quot;booking_window&quot;: 30, &quot;exclusive_services&quot;: true, &quot;concierge&quot;: true}', 'active')&#10;    &quot;&quot;&quot;)&#10;&#10;&#10;def downgrade() -&gt; None:&#10;    # Drop tables&#10;    op.drop_index('idx_company_memberships_status', 'company_memberships')&#10;    op.drop_index('idx_company_memberships_company_id', 'company_memberships')&#10;    op.drop_table('company_memberships')&#10;    &#10;    op.drop_table('membership_plans')&#10;    &#10;    # Drop enum type&#10;    membership_plan_type = postgresql.ENUM('standard', 'premium', 'vip', name='membershipplantype')&#10;    membership_plan_type.drop(op.get_bind(), checkfirst=True)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/api_v1/api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/api_v1/api.py" />
              <option name="originalContent" value="from fastapi import APIRouter&#10;from app.api.api_v1.endpoints import customers, users, companies, services, bookings, notifications, memberships&#10;&#10;api_router = APIRouter()&#10;api_router.include_router(users.router, prefix=&quot;/users&quot;, tags=[&quot;users&quot;])&#10;api_router.include_router(companies.router, prefix=&quot;/companies&quot;, tags=[&quot;companies&quot;])&#10;api_router.include_router(services.router, prefix=&quot;/services&quot;, tags=[&quot;services&quot;])&#10;api_router.include_router(customers.router, prefix=&quot;/customers&quot;, tags=[&quot;customers&quot;])&#10;api_router.include_router(bookings.router, prefix=&quot;/bookings&quot;, tags=[&quot;bookings&quot;])&#10;api_router.include_router(notifications.router, prefix=&quot;/notifications&quot;, tags=[&quot;notifications&quot;])&#10;api_router.include_router(memberships.router, prefix=&quot;/memberships&quot;, tags=[&quot;memberships&quot;])" />
              <option name="updatedContent" value="from fastapi import APIRouter&#10;from app.api.api_v1.endpoints import customers, users, companies, services, bookings, notifications, memberships&#10;&#10;api_router = APIRouter()&#10;api_router.include_router(users.router, prefix=&quot;/users&quot;, tags=[&quot;users&quot;])&#10;api_router.include_router(companies.router, prefix=&quot;/companies&quot;, tags=[&quot;companies&quot;])&#10;api_router.include_router(services.router, prefix=&quot;/services&quot;, tags=[&quot;services&quot;])&#10;api_router.include_router(customers.router, prefix=&quot;/customers&quot;, tags=[&quot;customers&quot;])&#10;api_router.include_router(bookings.router, prefix=&quot;/bookings&quot;, tags=[&quot;bookings&quot;])&#10;api_router.include_router(notifications.router, prefix=&quot;/notifications&quot;, tags=[&quot;notifications&quot;])&#10;api_router.include_router(memberships.router, prefix=&quot;/memberships&quot;, tags=[&quot;memberships&quot;])" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/schemas/membership.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/schemas/membership.py" />
              <option name="originalContent" value="from datetime import datetime&#10;from typing import Optional, List&#10;from pydantic import BaseModel, UUID4, ConfigDict&#10;&#10;from app.models.enums import MembershipPlanType, StatusType&#10;&#10;&#10;# Membership Plan Schemas&#10;class MembershipPlanBase(BaseModel):&#10;    name: str&#10;    plan_type: MembershipPlanType&#10;    description: Optional[str] = None&#10;    price: int&#10;    duration_days: int = 30&#10;&#10;&#10;class MembershipPlanCreate(MembershipPlanBase):&#10;    pass&#10;&#10;&#10;class MembershipPlanUpdate(BaseModel):&#10;    name: Optional[str] = None&#10;    description: Optional[str] = None&#10;    price: Optional[int] = None&#10;    duration_days: Optional[int] = None&#10;    status: Optional[StatusType] = None&#10;&#10;&#10;class MembershipPlan(MembershipPlanBase):&#10;    model_config = ConfigDict(from_attributes=True)&#10;    &#10;    id: UUID4&#10;    status: StatusType&#10;    created_at: datetime&#10;    updated_at: datetime&#10;&#10;&#10;# Company Membership Schemas&#10;class CompanyMembershipBase(BaseModel):&#10;    company_id: UUID4&#10;    membership_plan_id: UUID4&#10;    auto_renew: bool = True&#10;&#10;&#10;class CompanyMembershipCreate(BaseModel):&#10;    membership_plan_id: UUID4&#10;    auto_renew: bool = True&#10;&#10;&#10;class CompanyMembershipUpdate(BaseModel):&#10;    auto_renew: Optional[bool] = None&#10;    status: Optional[StatusType] = None&#10;&#10;&#10;class CompanyMembership(CompanyMembershipBase):&#10;    model_config = ConfigDict(from_attributes=True)&#10;    &#10;    id: UUID4&#10;    status: StatusType&#10;    start_date: datetime&#10;    end_date: datetime&#10;    created_at: datetime&#10;    updated_at: datetime&#10;    membership_plan: Optional[MembershipPlan] = None&#10;&#10;&#10;# Membership Status Response&#10;class MembershipStatusResponse(BaseModel):&#10;    has_membership: bool&#10;    plan_type: Optional[MembershipPlanType] = None&#10;    plan_name: Optional[str] = None&#10;    status: Optional[StatusType] = None&#10;    end_date: Optional[datetime] = None&#10;" />
              <option name="updatedContent" value="from datetime import datetime&#10;from typing import Optional, List&#10;from pydantic import BaseModel, UUID4, ConfigDict&#10;&#10;from app.models.enums import MembershipPlanType, StatusType&#10;&#10;&#10;# Membership Plan Schemas&#10;class MembershipPlanBase(BaseModel):&#10;    name: str&#10;    plan_type: MembershipPlanType&#10;    description: Optional[str] = None&#10;    price: int&#10;    duration_days: int = 30&#10;&#10;&#10;class MembershipPlanCreate(MembershipPlanBase):&#10;    pass&#10;&#10;&#10;class MembershipPlanUpdate(BaseModel):&#10;    name: Optional[str] = None&#10;    description: Optional[str] = None&#10;    price: Optional[int] = None&#10;    duration_days: Optional[int] = None&#10;    status: Optional[StatusType] = None&#10;&#10;&#10;class MembershipPlan(MembershipPlanBase):&#10;    model_config = ConfigDict(from_attributes=True)&#10;    &#10;    id: UUID4&#10;    status: StatusType&#10;    created_at: datetime&#10;    updated_at: datetime&#10;&#10;&#10;# Company Membership Schemas&#10;class CompanyMembershipBase(BaseModel):&#10;    company_id: UUID4&#10;    membership_plan_id: UUID4&#10;    auto_renew: bool = True&#10;&#10;&#10;class CompanyMembershipCreate(BaseModel):&#10;    membership_plan_id: UUID4&#10;    auto_renew: bool = True&#10;&#10;&#10;class CompanyMembershipUpdate(BaseModel):&#10;    auto_renew: Optional[bool] = None&#10;    status: Optional[StatusType] = None&#10;&#10;&#10;class CompanyMembership(CompanyMembershipBase):&#10;    model_config = ConfigDict(from_attributes=True)&#10;    &#10;    id: UUID4&#10;    status: StatusType&#10;    start_date: datetime&#10;    end_date: datetime&#10;    created_at: datetime&#10;    updated_at: datetime&#10;    membership_plan: Optional[MembershipPlan] = None&#10;&#10;&#10;# Membership Status Response&#10;class MembershipStatusResponse(BaseModel):&#10;    has_membership: bool&#10;    plan_type: Optional[MembershipPlanType] = None&#10;    plan_name: Optional[str] = None&#10;    status: Optional[StatusType] = None&#10;    end_date: Optional[datetime] = None&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/services/crud/base.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/services/crud/base.py" />
              <option name="updatedContent" value="from typing import Generic, TypeVar, Type, Any, Optional, List, Union, Dict&#10;from pydantic import BaseModel&#10;from sqlalchemy.orm import Session&#10;from app.db.base_class import BaseModel as DBBaseModel&#10;&#10;ModelType = TypeVar(&quot;ModelType&quot;, bound=DBBaseModel)&#10;CreateSchemaType = TypeVar(&quot;CreateSchemaType&quot;, bound=BaseModel)&#10;UpdateSchemaType = TypeVar(&quot;UpdateSchemaType&quot;, bound=BaseModel)&#10;&#10;class CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):&#10;    def __init__(self, model: Type[ModelType]):&#10;        &quot;&quot;&quot;&#10;        CRUD object with default methods to Create, Read, Update, Delete (CRUD).&#10;        **Parameters**&#10;        * `model`: A SQLAlchemy model class&#10;        * `schema`: A Pydantic model (schema) class&#10;        &quot;&quot;&quot;&#10;        self.model = model&#10;&#10;    def get(self, db: Session, id: Any) -&gt; Optional[ModelType]:&#10;        return db.query(self.model).filter(self.model.id == id).first()&#10;&#10;    def get_multi(&#10;        self, db: Session, *, skip: int = 0, limit: int = 100&#10;    ) -&gt; List[ModelType]:&#10;        return db.query(self.model).offset(skip).limit(limit).all()&#10;&#10;    def create(self, db: Session, *, obj_in: CreateSchemaType) -&gt; ModelType:&#10;        obj_in_data = obj_in.model_dump()&#10;        db_obj = self.model(**obj_in_data)&#10;        db.add(db_obj)&#10;        db.commit()&#10;        db.refresh(db_obj)&#10;        return db_obj&#10;&#10;    def update(&#10;        self,&#10;        db: Session,&#10;        *,&#10;        db_obj: ModelType,&#10;        obj_in: Union[UpdateSchemaType, Dict[str, Any]]&#10;    ) -&gt; ModelType:&#10;        obj_data = db_obj.__dict__&#10;        if isinstance(obj_in, dict):&#10;            update_data = obj_in&#10;        else:&#10;            update_data = obj_in.model_dump(exclude_unset=True)&#10;        for field in obj_data:&#10;            if field in update_data:&#10;                setattr(db_obj, field, update_data[field])&#10;        db.add(db_obj)&#10;        db.commit()&#10;        db.refresh(db_obj)&#10;        return db_obj&#10;&#10;    def remove(self, db: Session, *, id: Any) -&gt; ModelType:&#10;        obj = db.query(self.model).get(id)&#10;        db.delete(obj)&#10;        db.commit()&#10;        return obj" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/services/crud/booking.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/services/crud/booking.py" />
              <option name="originalContent" value="from datetime import timedelta&#10;from typing import List, Optional, Any&#10;from datetime import date&#10;&#10;from pydantic.v1 import UUID4&#10;from sqlalchemy.orm import Session&#10;&#10;from app.models import BookingServices, Customers&#10;from app.models.models import Bookings&#10;from app.models.enums import BookingStatus&#10;from app.schemas import BookingServiceRequest&#10;from app.schemas.schemas import BookingCreate, BookingUpdate&#10;from app.services.crud import service&#10;from app.core.redis_client import publish_event&#10;&#10;&#10;def get(db: Session, id: UUID4) -&gt; Optional[Bookings]:&#10;    return db.query(Bookings).filter(Bookings.id == id).first()&#10;&#10;&#10;def get_all(db: Session, skip: int = 0, limit: int = 100) -&gt; list[type[Bookings]]:&#10;    return list(db.query(Bookings).offset(skip).limit(limit).all())&#10;&#10;def get_user_bookings_in_range(db: Session, user_id: str, start_date: Any, end_date: Any) -&gt; list[&quot;Bookings&quot;]:&#10;    return list(db.query(Bookings).join(BookingServices).filter(&#10;        BookingServices.user_id == user_id,&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all())&#10;&#10;def get_all_bookings_in_range(db: Session, start_date: date, end_date: date):&#10;    # Join Bookings and BookingServices, return tuples of (booking, user_id)&#10;    return db.query(Bookings, BookingServices.user_id).join(BookingServices, Bookings.id == BookingServices.booking_id).filter(&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all()&#10;&#10;&#10;def get_all_bookings_in_range_by_company(db: Session, company_id: str, start_date: date, end_date: date):&#10;    return (db.query(Bookings).join(BookingServices, Bookings.id == BookingServices.booking_id)&#10;          .filter(&#10;        Bookings.company_id == company_id,&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date,&#10;        Bookings.status.in_(['scheduled', 'confirmed', 'completed'])&#10;    ).all())&#10;&#10;def calc_service_params(db, services: List[BookingServiceRequest], company_id: str = None) -&gt; tuple[int, int]:&#10;    total_duration = 0&#10;    total_price = 0&#10;&#10;    for srv in services:&#10;        selected_srv = service.get_service(db, srv.category_service_id, company_id)&#10;        total_duration += selected_srv.duration&#10;        total_price += int(selected_srv.price)&#10;&#10;    return total_duration, total_price&#10;&#10;&#10;def create(db: Session, *, obj_in: BookingCreate, customer_id: UUID4) -&gt; Bookings:&#10;    total_duration, total_price = calc_service_params(db, obj_in.services, obj_in.company_id)&#10;    db_obj = Bookings(&#10;        customer_id=customer_id,&#10;        company_id=obj_in.company_id,&#10;        start_at=obj_in.start_time,&#10;        end_at= obj_in.start_time + timedelta(minutes=total_duration),&#10;        total_price=total_price,&#10;        notes=obj_in.notes&#10;    )&#10;    db.add(db_obj)&#10;    db.commit()&#10;&#10;    start_time = obj_in.start_time&#10;    for srv in obj_in.services:&#10;        duration, _ = calc_service_params(db, [srv], obj_in.company_id)&#10;        db_service_obj = BookingServices(&#10;            booking_id=db_obj.id,&#10;            category_service_id=srv.category_service_id,&#10;            user_id=srv.user_id,&#10;            notes=srv.notes,&#10;            start_at=start_time,&#10;            end_at=start_time + timedelta(minutes=duration)&#10;        )&#10;        start_time = db_service_obj.end_at&#10;        db.add(db_service_obj)&#10;&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;    # Publish booking created event&#10;    publish_event(&quot;booking_created&quot;, str(db_obj.id))&#10;    return db_obj&#10;&#10;&#10;def update(db: Session, *, db_obj: Bookings, obj_in: BookingUpdate) -&gt; Bookings:&#10;    &quot;&quot;&quot;&#10;    Update a booking and its associated services.&#10;    &quot;&quot;&quot;&#10;    # Update basic booking fields&#10;    if obj_in.start_time is not None:&#10;        db_obj.start_at = obj_in.start_time&#10;    if obj_in.notes is not None:&#10;        db_obj.notes = obj_in.notes&#10;    if obj_in.status is not None:&#10;        db_obj.status = obj_in.status&#10;&#10;    # If services are being updated, we need to recalculate everything&#10;    if obj_in.services is not None:&#10;        # Remove existing booking services&#10;        db.query(BookingServices).filter(BookingServices.booking_id == db_obj.id).delete()&#10;&#10;        # Recalculate total duration and price&#10;        total_duration, total_price = calc_service_params(db, obj_in.services, str(db_obj.company_id))&#10;        db_obj.total_price = total_price&#10;&#10;        # Update end time based on new start time and duration&#10;        start_time = obj_in.start_time if obj_in.start_time is not None else db_obj.start_at&#10;        db_obj.end_at = start_time + timedelta(minutes=total_duration)&#10;&#10;        # Create new booking services&#10;        current_start_time = start_time&#10;        for srv in obj_in.services:&#10;            duration, _ = calc_service_params(db, [srv], str(db_obj.company_id))&#10;            db_service_obj = BookingServices(&#10;                booking_id=db_obj.id,&#10;                category_service_id=srv.category_service_id,&#10;                user_id=srv.user_id,&#10;                notes=srv.notes,&#10;                start_at=current_start_time,&#10;                end_at=current_start_time + timedelta(minutes=duration)&#10;            )&#10;            current_start_time = db_service_obj.end_at&#10;            db.add(db_service_obj)&#10;&#10;    db.add(db_obj)&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;    return db_obj&#10;&#10;&#10;def cancel(db: Session, *, booking_id: UUID4) -&gt; Optional[Bookings]:&#10;    &quot;&quot;&quot;&#10;    Cancel a booking by setting its status to CANCELLED.&#10;    Returns the updated booking or None if booking not found.&#10;    &quot;&quot;&quot;&#10;    db_obj = db.query(Bookings).filter(Bookings.id == booking_id).first()&#10;    if db_obj:&#10;        db_obj.status = BookingStatus.CANCELLED&#10;        db.add(db_obj)&#10;        db.flush()  # Flush to get the updated object but don't commit yet&#10;        return db_obj&#10;    return None&#10;&#10;&#10;def confirm(db: Session, *, booking_id: UUID4) -&gt; Optional[Bookings]:&#10;    &quot;&quot;&quot;&#10;    Confirm a booking by setting its status to CONFIRMED.&#10;    Returns the updated booking or None if booking not found.&#10;    &quot;&quot;&quot;&#10;    db_obj = db.query(Bookings).filter(Bookings.id == booking_id).first()&#10;    if db_obj:&#10;        db_obj.status = BookingStatus.CONFIRMED&#10;        db.add(db_obj)&#10;        db.flush()  # Flush to get the updated object but don't commit yet&#10;        return db_obj&#10;    return None&#10;" />
              <option name="updatedContent" value="from datetime import timedelta&#10;from typing import List, Optional, Any&#10;from datetime import date&#10;&#10;from pydantic.v1 import UUID4&#10;from sqlalchemy.orm import Session&#10;&#10;from app.models import BookingServices, Customers&#10;from app.models.models import Bookings&#10;from app.models.enums import BookingStatus&#10;from app.schemas import BookingServiceRequest&#10;from app.schemas.schemas import BookingCreate, BookingUpdate&#10;from app.services.crud import service&#10;from app.core.redis_client import publish_event&#10;&#10;&#10;def get(db: Session, id: UUID4) -&gt; Optional[Bookings]:&#10;    return db.query(Bookings).filter(Bookings.id == id).first()&#10;&#10;&#10;def get_all(db: Session, skip: int = 0, limit: int = 100) -&gt; list[type[Bookings]]:&#10;    return list(db.query(Bookings).offset(skip).limit(limit).all())&#10;&#10;def get_user_bookings_in_range(db: Session, user_id: str, start_date: Any, end_date: Any) -&gt; list[&quot;Bookings&quot;]:&#10;    return list(db.query(Bookings).join(BookingServices).filter(&#10;        BookingServices.user_id == user_id,&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all())&#10;&#10;def get_all_bookings_in_range(db: Session, start_date: date, end_date: date):&#10;    # Join Bookings and BookingServices, return tuples of (booking, user_id)&#10;    return db.query(Bookings, BookingServices.user_id).join(BookingServices, Bookings.id == BookingServices.booking_id).filter(&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date&#10;    ).all()&#10;&#10;&#10;def get_all_bookings_in_range_by_company(db: Session, company_id: str, start_date: date, end_date: date):&#10;    return (db.query(Bookings).join(BookingServices, Bookings.id == BookingServices.booking_id)&#10;          .filter(&#10;        Bookings.company_id == company_id,&#10;        Bookings.start_at &gt;= start_date,&#10;        Bookings.end_at &lt;= end_date,&#10;        Bookings.status.in_(['scheduled', 'confirmed', 'completed'])&#10;    ).all())&#10;&#10;def calc_service_params(db, services: List[BookingServiceRequest], company_id: str = None) -&gt; tuple[int, int]:&#10;    total_duration = 0&#10;    total_price = 0&#10;&#10;    for srv in services:&#10;        selected_srv = service.get_service(db, srv.category_service_id, company_id)&#10;        total_duration += selected_srv.duration&#10;        total_price += int(selected_srv.price)&#10;&#10;    return total_duration, total_price&#10;&#10;&#10;def create(db: Session, *, obj_in: BookingCreate, customer_id: UUID4) -&gt; Bookings:&#10;    total_duration, total_price = calc_service_params(db, obj_in.services, obj_in.company_id)&#10;    db_obj = Bookings(&#10;        customer_id=customer_id,&#10;        company_id=obj_in.company_id,&#10;        start_at=obj_in.start_time,&#10;        end_at= obj_in.start_time + timedelta(minutes=total_duration),&#10;        total_price=total_price,&#10;        notes=obj_in.notes&#10;    )&#10;    db.add(db_obj)&#10;    db.commit()&#10;&#10;    start_time = obj_in.start_time&#10;    for srv in obj_in.services:&#10;        duration, _ = calc_service_params(db, [srv], obj_in.company_id)&#10;        db_service_obj = BookingServices(&#10;            booking_id=db_obj.id,&#10;            category_service_id=srv.category_service_id,&#10;            user_id=srv.user_id,&#10;            notes=srv.notes,&#10;            start_at=start_time,&#10;            end_at=start_time + timedelta(minutes=duration)&#10;        )&#10;        start_time = db_service_obj.end_at&#10;        db.add(db_service_obj)&#10;&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;    # Publish booking created event&#10;    publish_event(&quot;booking_created&quot;, str(db_obj.id))&#10;    return db_obj&#10;&#10;&#10;def update(db: Session, *, db_obj: Bookings, obj_in: BookingUpdate) -&gt; Bookings:&#10;    &quot;&quot;&quot;&#10;    Update a booking and its associated services.&#10;    &quot;&quot;&quot;&#10;    # Update basic booking fields&#10;    if obj_in.start_time is not None:&#10;        db_obj.start_at = obj_in.start_time&#10;    if obj_in.notes is not None:&#10;        db_obj.notes = obj_in.notes&#10;    if obj_in.status is not None:&#10;        db_obj.status = obj_in.status&#10;&#10;    # If services are being updated, we need to recalculate everything&#10;    if obj_in.services is not None:&#10;        # Remove existing booking services&#10;        db.query(BookingServices).filter(BookingServices.booking_id == db_obj.id).delete()&#10;&#10;        # Recalculate total duration and price&#10;        total_duration, total_price = calc_service_params(db, obj_in.services, str(db_obj.company_id))&#10;        db_obj.total_price = total_price&#10;&#10;        # Update end time based on new start time and duration&#10;        start_time = obj_in.start_time if obj_in.start_time is not None else db_obj.start_at&#10;        db_obj.end_at = start_time + timedelta(minutes=total_duration)&#10;&#10;        # Create new booking services&#10;        current_start_time = start_time&#10;        for srv in obj_in.services:&#10;            duration, _ = calc_service_params(db, [srv], str(db_obj.company_id))&#10;            db_service_obj = BookingServices(&#10;                booking_id=db_obj.id,&#10;                category_service_id=srv.category_service_id,&#10;                user_id=srv.user_id,&#10;                notes=srv.notes,&#10;                start_at=current_start_time,&#10;                end_at=current_start_time + timedelta(minutes=duration)&#10;            )&#10;            current_start_time = db_service_obj.end_at&#10;            db.add(db_service_obj)&#10;&#10;    db.add(db_obj)&#10;    db.commit()&#10;    db.refresh(db_obj)&#10;    return db_obj&#10;&#10;&#10;def cancel(db: Session, *, booking_id: UUID4) -&gt; Optional[Bookings]:&#10;    &quot;&quot;&quot;&#10;    Cancel a booking by setting its status to CANCELLED.&#10;    Returns the updated booking or None if booking not found.&#10;    &quot;&quot;&quot;&#10;    db_obj = db.query(Bookings).filter(Bookings.id == booking_id).first()&#10;    if db_obj:&#10;        db_obj.status = BookingStatus.CANCELLED&#10;        db.add(db_obj)&#10;        db.flush()  # Flush to get the updated object but don't commit yet&#10;        return db_obj&#10;    return None&#10;&#10;&#10;def confirm(db: Session, *, booking_id: UUID4) -&gt; Optional[Bookings]:&#10;    &quot;&quot;&quot;&#10;    Confirm a booking by setting its status to CONFIRMED.&#10;    Returns the updated booking or None if booking not found.&#10;    &quot;&quot;&quot;&#10;    db_obj = db.query(Bookings).filter(Bookings.id == booking_id).first()&#10;    if db_obj:&#10;        db_obj.status = BookingStatus.CONFIRMED&#10;        db.add(db_obj)&#10;        db.flush()  # Flush to get the updated object but don't commit yet&#10;        return db_obj&#10;    return None" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>